import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten, SpatialDropout2D
import numpy as np

from keras import callbacks
#earlystopping = callbacks.EarlyStopping(monitor='val_loss',patience=5)
model_checkpoint = callbacks.ModelCheckpoint(
    'first.h5',
    monitor='val_accuracy',
    save_best_only=True,
    save_weights_only=False,
    mode='max')

import matplotlib.pyplot as plt
def plot_history(history, val_1, val_2, title):
    plt.plot(history.history[val_1])
    plt.plot(history.history[val_2])

    plt.title(title)
    plt.ylabel(val_1)
    plt.xlabel('epoch')
    plt.legend([val_1, val_2], loc='upper left')
    plt.show()
    
    batch_size = 64
input_shape = (150, 150, 3)
categories = 5
train_datagen = ImageDataGenerator(
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.1,
        horizontal_flip=True,
        rotation_range=10.,
        width_shift_range=0.1,
        height_shift_range=0.1,
        vertical_flip=True)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
        './Train',
        target_size=input_shape[:-1],
        batch_size=batch_size,
        class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(
        './Test',
        target_size=input_shape[:-1],
        batch_size=batch_size,
        class_mode='categorical')
 model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=input_shape))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(SpatialDropout2D(0.25))


model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(SpatialDropout2D(0.25))

model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(SpatialDropout2D(0.25))
  
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(categories, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy,optimizer='Adam',metrics=['accuracy', 'mse'])
history = model.fit_generator(
        train_generator,
        steps_per_epoch = np.ceil(6000/batch_size),
        epochs=100,
        validation_data=validation_generator,
        validation_steps=np.ceil(1000/batch_size),
        callbacks = [model_checkpoint])
        
model.summary()
print(model.evaluate_generator(validation_generator))
plot_history(history, 'accuracy', 'val_accuracy', 'Accuracy')
plot_history(history, 'loss', 'val_loss', 'Loss')
model.save('first_final.h5')
print("Model saved")

from keras.models import load_model
model2 = load_model('first.h5')
print(model2.evaluate_generator(validation_generator))
model2.summary()
print(validation_generator.class_indices)
print(train_generator.class_indices)

import cv2
img = cv2.imread('./cow.jpeg') #Testing the model with an image of a cow downloaded from the internet
plt.imshow(img)
print(img.shape)

img = cv2.resize(img,(150,150)) #Resizing the image as our model has been trained on a certain size of images
print(img.shape)
plt.imshow(img)

keys = train_generator.class_indices
print(keys)
names = list(keys.keys())
print(names)

y = model2.predict(img.reshape(1,150,150,3))
print(y)
print('Predicted animal: ',[np.argmax(y)], "which is", names[np.argmax(y)], "according to the class indices")

import cv2
img = cv2.imread('./dog.jpg') #Testing the model with an image of a dog downloaded from the internet
plt.imshow(img)
print(img.shape)

img = cv2.resize(img,(150,150)) #Resizing the image as our model has been trained on a certain size of images
print(img.shape)
plt.imshow(img)

keys = train_generator.class_indices
print(keys)
names = list(keys.keys())
print(names)

y = model2.predict(img.reshape(1,150,150,3))
print(y)
print('Predicted animal: ',[np.argmax(y)], "which is", names[np.argmax(y)], "according to the class indices")

import cv2
img = cv2.imread('./butterfly.jpeg') #Testing the model with an image of a butterfly downloaded from the internet
plt.imshow(img)
print(img.shape)

img = cv2.resize(img,(150,150)) #Resizing the image as our model has been trained on a certain size of images
print(img.shape)
plt.imshow(img)

keys = train_generator.class_indices
print(keys)
names = list(keys.keys())
print(names)

y = model2.predict(img.reshape(1,150,150,3))
print(y)
print('Predicted animal: ',[np.argmax(y)], "which is", names[np.argmax(y)], "according to the class indices")
